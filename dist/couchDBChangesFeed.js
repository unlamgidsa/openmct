!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.couchDBChangesFeed=n():e.couchDBChangesFeed=n()}(this,(function(){return function(e){var n={};function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}return o.m=e,o.c=n,o.d=function(e,n,t){o.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:t})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,n){if(1&n&&(e=o(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var t=Object.create(null);if(o.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var r in e)o.d(t,r,function(n){return e[n]}.bind(null,r));return t},o.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(n,"a",n),n},o.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},o.p="",o(o.s=826)}({826:function(e,n){!function(){const e=[];let n=!1;const o=new AbortController,t=o.signal;self.onconnect=function(t){let r=t.ports[0];e.push(r),r.postMessage({type:"connection",connectionId:e.length}),r.onmessage=async function(t){if("close"===t.data.request)return console.log("Closing connection"),e.splice(t.data.connectionId-1,1),e.length<=0&&o.abort(),console.log("Closed."),void(n=!1);if("changes"===t.data.request){if(!0===n)return;do{await self.listenForChanges(t.data.url,t.data.body,r)}while(n)}},r.start()},self.onerror=function(){console.log("Error on feed")},self.listenForChanges=async function(o,r,c){n=!0;let l=!1;console.log("Opening changes feed connection.");const s=await fetch(o,{method:"POST",headers:{"Content-Type":"application/json"},signal:t,body:r});let i;for(void 0===s.body?l=!0:i=s.body.getReader();!l;){const{done:n,value:o}=await i.read();if(n&&(l=!0),o){let n=new Uint8Array(o.length);n.set(o,0);const t=new TextDecoder("utf-8").decode(n).split("\n");console.log("Received chunk"),t.length&&""===t[t.length-1]&&t.forEach((n,o)=>{try{if(n){const o=JSON.parse(n);e.forEach((function(e){e.postMessage({objectChanges:o})}))}}catch(e){console.log(e)}})}}console.log("Done reading changes feed")}}()}})}));
//# sourceMappingURL=couchDBChangesFeed.js.map