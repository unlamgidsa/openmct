{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/plugins/persistence/couch/CouchChangesFeed.js"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","connections","connected","controller","AbortController","signal","self","onconnect","e","port","ports","push","postMessage","type","connectionId","length","onmessage","async","event","data","request","console","log","splice","abort","listenForChanges","url","body","start","onerror","error","response","fetch","method","headers","reader","undefined","getReader","done","read","chunk","Uint8Array","set","decodedChunk","TextDecoder","decode","split","forEach","doc","index","objectChanges","JSON","parse","connection","decodeError"],"mappings":"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","file":"couchDBChangesFeed.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"couchDBChangesFeed\"] = factory();\n\telse\n\t\troot[\"couchDBChangesFeed\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 826);\n","(function () {\n    const connections = [];\n    let connected = false;\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    self.onconnect = function (e) {\n        let port = e.ports[0];\n        connections.push(port);\n\n        port.postMessage({\n            type: 'connection',\n            connectionId: connections.length\n        });\n\n        port.onmessage = async function (event) {\n            if (event.data.request === 'close') {\n                console.log('Closing connection');\n                connections.splice(event.data.connectionId - 1, 1);\n                if (connections.length <= 0) {\n                    // abort any outstanding requests if there's nobody listening to it.\n                    controller.abort();\n                }\n\n                console.log('Closed.');\n                connected = false;\n\n                return;\n            }\n\n            if (event.data.request === 'changes') {\n                if (connected === true) {\n                    return;\n                }\n\n                do {\n                    await self.listenForChanges(event.data.url, event.data.body, port);\n                    // eslint-disable-next-line no-unmodified-loop-condition\n                } while (connected);\n            }\n        };\n\n        port.start();\n\n    };\n\n    self.onerror = function () {\n        //do nothing\n        console.log('Error on feed');\n    };\n\n    self.listenForChanges = async function (url, body, port) {\n        connected = true;\n        let error = false;\n        // feed=continuous maintains an indefinitely open connection with a keep-alive of HEARTBEAT milliseconds until this client closes the connection\n        // style=main_only returns only the current winning revision of the document\n\n        console.log('Opening changes feed connection.');\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": 'application/json'\n            },\n            signal,\n            body\n        });\n\n        let reader;\n\n        if (response.body === undefined) {\n            error = true;\n        } else {\n            reader = response.body.getReader();\n        }\n\n        while (!error) {\n            const {done, value} = await reader.read();\n            //done is true when we lose connection with the provider\n            if (done) {\n                error = true;\n            }\n\n            if (value) {\n                let chunk = new Uint8Array(value.length);\n                chunk.set(value, 0);\n                const decodedChunk = new TextDecoder(\"utf-8\").decode(chunk).split('\\n');\n                console.log('Received chunk');\n                if (decodedChunk.length && decodedChunk[decodedChunk.length - 1] === '') {\n                    decodedChunk.forEach((doc, index) => {\n                        try {\n                            if (doc) {\n                                const objectChanges = JSON.parse(doc);\n                                connections.forEach(function (connection) {\n                                    connection.postMessage({\n                                        objectChanges\n                                    });\n                                });\n                            }\n                        } catch (decodeError) {\n                            //do nothing;\n                            console.log(decodeError);\n                        }\n                    });\n                }\n            }\n\n        }\n\n        console.log('Done reading changes feed');\n    };\n\n}());\n"],"sourceRoot":""}